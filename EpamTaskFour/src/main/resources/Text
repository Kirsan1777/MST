В C++ идентификатор представляет собой имя, которое присваивается функции переменной или иному элементу, определенному пользователем. Идентификаторы могут состоять из одного или нескольких символов (значимыми должны быть первые символа). Имена переменных должны начинаться с буквы или символа подчеркивания Последующим символом может быть буква, цифра и символ подчеркивания. Символы подчеркивания можно использовать для улучшения читабельности имени переменной напримерfirst_name.В C++ прописные и строчные буквы воспринимаются как личные символы, т.е.myvarиMyVar— это разные имена. Вот несколько примеров допустимых идентификаторов.


   В C++ нельзя использовать в качестве идентификаторов ключевые слова. Нельзя же использовать в качестве идентификаторов имена стандартных функций (например abs). Помните, что идентификатор не должен начинаться с цифры. Так,12х— недопустимый идентификатор. Конечно, вы вольны называть переменные и другие программные элементы по своему усмотрению, но обычно идентификатор отражает н чение или смысловую характеристику элемента, которому он принадлежит.Стандартная библиотека C++
   В примерах программ, представленных в этой главе, использовалась функция abs().По существу функция abs() не является частью языка C++, но ее "знает" каждый С++-компилятор. Эта функция, как и множество других, входит в составстандартной библиотеки.В примерах этой книги мы подробно рассмотрим использование многих библиотечных функций C++.
   Стандартная библиотека C++ содержит множество встроенных функций, которые программисты могут использовать в своих программах.
   В C++ определен довольно большой набор функций, которые содержатся в стандартной библиотеке. Эти функции предназначены для выполнения часто встречающихся задач, включая операции ввода-вывода, математические вычисления и обработку строк. При использовании программистом библиотечной функции компилятор автоматически связывает объектный код этой функции с объектным кодом программы.
   Поскольку стандартная библиотека C++ довольно велика, в ней можно найти много полезных функций, которыми действительно часто пользуются программисты. Библиотечные функции можно применять подобно строительным блокам, из которых возводится здание. Чтобы не "изобретать велосипед", ознакомьтесь с документацией на библиотеку используемого вами компилятора. Если вы сами напишете функцию, которая будет "переходить" с вами от программы в программу, ее также можно поместить в библиотеку.
   Помимо библиотеки функций, каждый С++-компилятор также содержитбиблиотеку классов,которая является объектно-ориентированной библиотекой. Наконец, в C++ определена стандартная библиотека шаблонов (Standard Template Library— STL). Она предоставляет процедуры "многократного использования", которые можно настраивать в соответствии с конкретными требованиями. Но прежде чем применять библиотеку классов или STL, нам необходимо познакомиться с классами, объектами и понять, в чем состоит суть шаблона.
   Глава 3: Основные типы данных
   Как вы узнали из главы 2, все переменные в C++ должны быть объявлены до их использования. Это необходимо для компилятора, которому нужно иметь информацию о типе данных, содержащихся в переменных. Только в этом случае компилятор сможет надлежащим образом скомпилировать инструкции, в которых используются переменные. В C++ определено семь основных типов данных:символьный,символьный двубайтовый,целочисленный,с плавающей точкой,с плавающей точкой двойной точности,логический (или булев) и"не имеющий значения".Для объявления переменных этих типов используются ключевые словаchar,wchar_t,int,float,double,boolиvoidсоответственно. Типичные размеры значений в битах и диапазоны представления для каждого из этих семи типов приведены в табл. 3.1. Помните, что размеры и диапазоны, используемые вашим компилятором, могут отличаться от приведенных здесь. Самое большое различие существует между 16- и 32-разрядными средами: для представления целочисленного значения в 16-разрядной среде используется, как правило, 16 бит, а в 32-разрядной — 32.
   Переменные типаcharиспользуются для хранения 8-разрядныхASCII-символов (например букв А, Б или В) либо любых других 8-разрядных значений. Чтобы задать символ, необходимо заключить его в одинарные кавычки. Типwchar_tпредназначен для хранения символов, входящих в состав больших символьных наборов. Вероятно, вам известно, что в некоторых естественных языках (например китайском)определено очень большое количество символов, для которых 8-разрядное представление (обеспечиваемое типомchar)весьма недостаточно. Для решения проблем такого рода в язык C++ и был добавлен типwchar_t,который вам пригодится, если вы планируете выходить со своими программами на международный рынок.
   Переменные типаintпозволяют хранить целочисленные значения (не содержащие дробных компонентов). Переменные этого типа часто используются для управления циклами и в условных инструкциях. К переменным типаfloatиdoubleобращаются либо для обработки чисел с дробной частью, либо при необходимости выполнения операций над очень большими или очень малыми числами. Типыfloatиdoubleразличаются значением наибольшего (и наименьшего) числа, которые можно хранить с помощью переменных этих типов. Как показано в табл. 3.1, типdoubleв C++ позволяет хранить число, приблизительно в десять раз превышающее значение типаfloat.


   Типboolпредназначен для хранения булевых (т.е. ИСТИНА/ЛОЖЬ) значений. В C++ определены две булевы константы:trueиfalse,являющиеся единственными значениями, которые могут иметь переменные типаbool.
   Как вы уже видели, типvoidиспользуется для объявления функции, которая не возвращает значения. Другие возможности использования типаvoidрассматриваются ниже в этой книге.Объявление переменных
   Общий формат инструкции объявления переменных выглядит так:

   тип список_переменных;
   Здесь элементтипозначает допустимый в C++ тип данных, а элементсписок_переменныхможет состоять из одного или нескольких имен (идентификаторов), разделенных запятыми. Вот несколько примеров объявлений переменных.

   int i, j, k;
   char ch, chr;
   float f, balance;

   double d;
   В C++ имя переменной никак не связано с ее типом.
   Согласно стандарту C++ первые 1024 символа любого имени (в том числе и имени переменной) являются значимыми. Это означает, что если два имени различаются хотя бы одним символом из первых 1024, компилятор будет рассматривать их как различные имена.
   Переменные могут быть объявлены внутри функций, в определении параметров функций и вне всех функций. В зависимости от места объявления они называютсялокальными переменными,формальными параметрамииглобальными переменнымисоответственно. О важности этих трех типов переменных мы поговорим ниже в этой книге, а пока кратко рассмотрим каждый тип в отдельности.Локальные переменные
   Переменные, которые объявляются внутри функции, называютсялокальными.Их могут использовать только инструкции, относящиеся к телу функции. Локальные переменные неизвестны внешним функциям. Рассмотрим пример.

   #include&lt;iostream&gt;
   using namespace std;

   void func();

   int main()

   {

    int x; // Локальная переменная для функции main().
    х = 10;
    func();
    cout&lt;&lt; "\n";
    cout&lt;&lt; x; //Выводится число 10.

    return 0;

   }

   void func()

   {

    int x; // Локальная переменная для функции func().

    x = -199;

    cout&lt;&lt; x; //Выводится число -199.

   }
   Локальная переменная известна только функции, в которой она определена.
   В этой программе целочисленная переменная с именемхобъявлена дважды: сначала в функцииmain(),а затем в функцииfunc().Но переменнаяхиз функцииmain()не имеет никакого отношения к переменнойхиз функцииfunc().Другими словами, изменения, которым подвергается переменнаяхиз функцииfunc(),никак не отражаются на переменнойхиз функцииmain().Поэтому приведенная выше программа выведет на экран числа-199и10.
   В C++ локальные переменные создаются при вызове функции и разрушаются при выходе из нее. То же самое можно сказать и о памяти, выделяемой для локальных переменных: при вызове функции в нее записываются соответствующие значения, а при выходе из функции память освобождается. Это означает, что локальные переменные не поддерживают своих значений между вызовами функций. (Другими словами, значение локальной переменной теряется при каждом возврате из функции.)
   В некоторых литературных источниках, посвященных C++, локальная переменная называетсядинамическойилиавтоматической переменной.Но в этой книге мы будем придерживаться более распространенного терминалокальная переменная.Формальные параметры
   Формальный параметр—это локальная переменная, которая получает значение аргумента, переданного функции.